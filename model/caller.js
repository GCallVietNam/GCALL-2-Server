/*
This module consists of data manipulation in table Caller
Caller's fields:
- objectId:
	Unique ID of this record auto-generated by Parse
- phone:
	Phone number of them
- code:
	Their verification code
- verified:
	Their verification status
*/

'use strict';

const kaiseki=require('../config/parse-config');
const kai=require('../lib/kaiseki-promise')(kaiseki);
const Promise=require('bluebird');

// Create a new caller

module.exports.createCaller=function(data){
	return new Promise((resolve,reject)=>{
		kai.createObjectAsync('Caller',data).then(
			(result)=>{
				if (result.body.error){
					reject(result.body.error);
				} else{
					resolve(result.body);
				}
			},
			(error)=>reject(error));
	});
}

// Update a caller

module.exports.updateCaller=function(objectId,data){
	return new Promise((resolve,reject)=>{
		kai.updateObjectAsync('Caller',objectId,data).then(
			(result)=>{
				if (result.body.error){
					reject(result.body.error);
				} else{
					resolve(result.body);
				}
			},
			(error)=>reject(error));
	});
}

// Get a caller by their phone number

module.exports.getCaller=function(phone){
	return new Promise((resolve,reject)=>{
		const params={
			where:{phone:phone}
		};
		kai.getObjectsAsync('Caller',params).then(
			(result)=>{
				const body=JSON.parse(result.body);
				if (body.error){
					reject({data:null,error:body.error});
				} else{
					resolve({data:body.results[0] || null,error:null});
				}
			},
			(error)=>reject({data:null,error:error}));
	});
}